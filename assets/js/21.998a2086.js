(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{508:function(t,v,_){"use strict";_.r(v);var l=_(28),e=Object(l.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"为什么是集合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么是集合"}},[t._v("#")]),t._v(" 为什么是集合")]),t._v(" "),_("p",[t._v("回想数组，有几个弊端：")]),t._v(" "),_("ul",[_("li",[t._v("声明数组时需要指定容量且后续无法更改；")]),t._v(" "),_("li",[t._v("只能存储相同类型元素")]),t._v(" "),_("li",[t._v("数组增 / 删元素相对麻烦（扩容）")])]),t._v(" "),_("p",[t._v("基于上述问题，集合的出现可缓解")]),t._v(" "),_("p",[t._v("集合的容量动态灵活，提供了一系列方法，增 / 删元素更为简洁。")]),t._v(" "),_("p",[t._v("集合主要分为两类")]),t._v(" "),_("ul",[_("li",[t._v("Collection")]),t._v(" "),_("li",[t._v("Map")])]),t._v(" "),_("p",[_("img",{attrs:{src:"C:%5CUsers%5Chu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220620001030005.png",alt:"image-20220620001030005"}})]),t._v(" "),_("p",[t._v("集合主要是单列集合和双列集合，Collection 下的两个重要子接口 List 和 Set，其实现子类均为单列集合。")]),t._v(" "),_("p",[t._v("Map 接口的实现子类 是双列集合，存放的 K-V")]),t._v(" "),_("h2",{attrs:{id:"collection"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[t._v("#")]),t._v(" Collection")]),t._v(" "),_("p",[t._v("collection 接口实现子类可存放多个元素，可以是 Object")]),t._v(" "),_("p",[t._v("不同实现类对是否可存放重复元素要求不同。")]),t._v(" "),_("p",[t._v("List 存放元素有序，Set 存放元素无序")]),t._v(" "),_("p",[t._v("Collection 接口没有直接实现子类，通过其子接口 Set 和 List 实现。")]),t._v(" "),_("p",[t._v("Collection 接口常用方法通常使用 ArrayList")]),t._v(" "),_("h3",{attrs:{id:"collection常用方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#collection常用方法"}},[t._v("#")]),t._v(" Collection 常用方法")]),t._v(" "),_("ul",[_("li",[t._v("add()")]),t._v(" "),_("li",[t._v("remove()")]),t._v(" "),_("li",[t._v("contains()")]),t._v(" "),_("li",[t._v("containsAll(Collection<?>)")]),t._v(" "),_("li",[t._v("size()")]),t._v(" "),_("li",[t._v("isEmpty()")]),t._v(" "),_("li",[t._v("clear()")]),t._v(" "),_("li",[t._v("addAll(Collection<?>)")])]),t._v(" "),_("p",[t._v("...")]),t._v(" "),_("h3",{attrs:{id:"使用-iterator-迭代器-便利元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用-iterator-迭代器-便利元素"}},[t._v("#")]),t._v(" 使用 Iterator （迭代器）便利元素")]),t._v(" "),_("p",[t._v("Iterator 对象称为迭代器，用于遍历 Collection 集合中的元素，所有实现 Collection 接口的集合类均有 iterator () 方法，返回一个迭代器，Iterator 仅用于遍历集合，Iterator 本身不存放对象。")]),t._v(" "),_("p",[t._v("执行原理：")]),t._v(" "),_("ul",[_("li",[t._v("hasNext () 判断是否存在下一个元素")]),t._v(" "),_("li",[t._v("next ()“指针下移”，返回所指位置元素，可理解初始指针位置为 - 1")])]),t._v(" "),_("p",[t._v("直接调用 next 方法会抛出 NoSuchElementException 异常，故需要先判断")]),t._v(" "),_("h3",{attrs:{id:"增强for循环遍历元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#增强for循环遍历元素"}},[t._v("#")]),t._v(" 增强 for 循环遍历元素")])])}),[],!1,null,null,null);v.default=e.exports}}]);