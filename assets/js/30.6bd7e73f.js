(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{517:function(a,s,t){"use strict";t.r(s);var r=t(28),v=Object(r.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"数据结构基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构基本概念"}},[a._v("#")]),a._v(" 数据结构基本概念")]),a._v(" "),t("p",[a._v("数据")]),a._v(" "),t("p",[a._v("数据项")]),a._v(" "),t("p",[a._v("数据元素")]),a._v(" "),t("p",[a._v("数据对象")]),a._v(" "),t("p",[a._v("数据类型")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("原子类型")])]),a._v(" "),t("li",[t("p",[a._v("结构类型")])]),a._v(" "),t("li",[t("p",[a._v("抽象数据类型")])])]),a._v(" "),t("p",[a._v("数据结构 描述数据元素相互间的关系")]),a._v(" "),t("p",[a._v("数据结构三要素")]),a._v(" "),t("ul",[t("li",[a._v("逻辑结构（算法的设计）\n"),t("ul",[t("li",[a._v("线性")]),a._v(" "),t("li",[a._v("非线性")])])]),a._v(" "),t("li",[a._v("存储结构（算法的实现）\n"),t("ul",[t("li",[a._v("顺序存储")]),a._v(" "),t("li",[a._v("链式存储")]),a._v(" "),t("li",[a._v("索引存储")]),a._v(" "),t("li",[a._v("散列存储")])])]),a._v(" "),t("li",[a._v("数据的运算\n"),t("ul",[t("li",[a._v("运算的定义")]),a._v(" "),t("li",[a._v("运算的实现")])])])]),a._v(" "),t("h2",{attrs:{id:"算法和算法评价"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法和算法评价"}},[a._v("#")]),a._v(" 算法和算法评价")]),a._v(" "),t("p",[a._v("### 基本概念"),t("br"),a._v("\n求解问题的步骤描述"),t("br"),a._v("\n算法特征")]),a._v(" "),t("ul",[t("li",[a._v("有确可输出"),t("br"),a._v("\n好算法的目标")]),a._v(" "),t("li",[a._v("正可见高低")])]),a._v(" "),t("h3",{attrs:{id:"算法效率的度量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法效率的度量"}},[a._v("#")]),a._v(" 算法效率的度量")]),a._v(" "),t("p",[a._v("时间复杂度、空间复杂度")]),a._v(" "),t("h4",{attrs:{id:"时间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[a._v("#")]),a._v(" 时间复杂度")]),a._v(" "),t("p",[a._v("不仅依赖规模，也取决于输入数据的性质"),t("br"),a._v("\n语句频度"),t("br"),a._v("\n T (n)：所有语句频度之和"),t("br"),a._v("\n f (n)：基本运算频度"),t("br"),a._v("\n最坏时间复杂度"),t("br"),a._v("\n平均时间复杂度"),t("br"),a._v("\n最好时间复杂度"),t("br"),a._v("\n加法规则：相加取最大数量级"),t("br"),a._v("\n乘法规则：相乘数量级"),t("br"),a._v("\n渐进时间复杂度：常对幂指阶")]),a._v(" "),t("h4",{attrs:{id:"空间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[a._v("#")]),a._v(" 空间复杂度")]),a._v(" "),t("p",[a._v("S (n)：算法耗费的存储空间"),t("br"),a._v("\n算法原地工作")]),a._v(" "),t("h3",{attrs:{id:"解题技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解题技巧"}},[a._v("#")]),a._v(" 解题技巧")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("循环体中变量参与循环条件判断"),t("br"),a._v("\n找出主体语句中与 T (n) 成正比的循环变量，将之带入条件中进行计算")])]),a._v(" "),t("li",[t("p",[a._v("循环主体中变量与循环条件无关"),t("br"),a._v("\n采用数学归纳法或直接累计循环次数，只关注主体语句执行次数。分为递归或非递归：")]),a._v(" "),t("ol",[t("li",[a._v("递归程序：公式进行递推")]),a._v(" "),t("li",[a._v("非递归程序：直接累次计数")])])])]),a._v(" "),t("h1",{attrs:{id:"线性表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[a._v("#")]),a._v(" 线性表")]),a._v(" "),t("h2",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[a._v("#")]),a._v(" 基本概念")]),a._v(" "),t("p",[a._v("相同数据类型，有限个数据元素。"),t("br"),a._v("\n表头、表尾，直接前驱、直接后继。"),t("br"),a._v("\n注意区分顺序表和链表与之区别。")]),a._v(" "),t("h3",{attrs:{id:"基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[a._v("#")]),a._v(" 基本操作")]),a._v(" "),t("p",[a._v("图片"),t("br"),a._v("\n对表中元素进行增删改操作使用 &")]),a._v(" "),t("h2",{attrs:{id:"顺序表示-顺序表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序表示-顺序表"}},[a._v("#")]),a._v(" 顺序表示（顺序表）")]),a._v(" "),t("p",[a._v("存储密度高，随机访问"),t("br"),a._v("\n使用顺序存储，逻辑顺序与物理顺序相同。"),t("br"),a._v("\n注意区分线性表中位序从 1 开始，数组则是从 0 开始。")]),a._v(" "),t("h3",{attrs:{id:"静态分配与动态分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态分配与动态分配"}},[a._v("#")]),a._v(" 静态分配与动态分配")]),a._v(" "),t("ul",[t("li",[a._v("静态分配 空间固定，满了溢出")]),a._v(" "),t("li",[a._v("动态分配 空间固定，满了申请，转移数据"),t("br"),a._v("\n动态分配利用指针，但并非链式存储。")])]),a._v(" "),t("h3",{attrs:{id:"基本操作的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本操作的实现"}},[a._v("#")]),a._v(" 基本操作的实现")]),a._v(" "),t("h4",{attrs:{id:"插入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[a._v("#")]),a._v(" 插入")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("分析最好、最坏、平均")]),a._v(" "),t("h4",{attrs:{id:"删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[a._v("#")]),a._v(" 删除")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("分析最好、最坏、平均")]),a._v(" "),t("h4",{attrs:{id:"按值查找-顺序查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按值查找-顺序查找"}},[a._v("#")]),a._v(" 按值查找（顺序查找）")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("分析最好、最坏、平均")]),a._v(" "),t("h2",{attrs:{id:"链式表示-链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链式表示-链表"}},[a._v("#")]),a._v(" 链式表示（链表）")]),a._v(" "),t("p",[a._v("又称单链表，浪费存储空间。"),t("br"),a._v("\n查找需要从头遍历。"),t("br"),a._v("\n非随机存取，只需修改指针。"),t("br"),a._v("\n通过结点存储数据元素和后继指针：")]),a._v(" "),t("ul",[t("li",[a._v("数据域")]),a._v(" "),t("li",[a._v("指针域"),t("br"),a._v("\n带头指针：单链表第一个结点前附加一个头结点，通常不存信息。")]),a._v(" "),t("li",[a._v("方便操作，无需特殊处理")]),a._v(" "),t("li",[a._v("头指针始终非空，空表非空表处理得到统一"),t("br"),a._v("\n不带头结点：直接指向第一个结点。")])]),a._v(" "),t("h3",{attrs:{id:"基本操作实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本操作实现"}},[a._v("#")]),a._v(" 基本操作实现")]),a._v(" "),t("h4",{attrs:{id:"头插法建立单链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#头插法建立单链表"}},[a._v("#")]),a._v(" 头插法建立单链表")]),a._v(" "),t("p",[a._v("新结点插入表头（头结点）之后，输出与输入相反")]),a._v(" "),t("div",{staticClass:"language-C line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"尾插法建立单链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#尾插法建立单链表"}},[a._v("#")]),a._v(" 尾插法建立单链表")]),a._v(" "),t("p",[a._v("增加尾指针 r（始终指向尾结点），新结点插到表尾")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"按序号查找结点值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按序号查找结点值"}},[a._v("#")]),a._v(" 按序号查找结点值")]),a._v(" "),t("p",[a._v("从第一个结点出发，遍历整个链表，直到第 i 个结点")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"按值查找结点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按值查找结点"}},[a._v("#")]),a._v(" 按值查找结点")]),a._v(" "),t("p",[a._v("从第一个结点开始，遍历整个链表，存在返回节点指针，否则返回 NULL")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"插入结点操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入结点操作"}},[a._v("#")]),a._v(" 插入结点操作")]),a._v(" "),t("ol",[t("li",[a._v("检查合法性")]),a._v(" "),t("li",[a._v("调用查找结点函数，查找第 i-1 个节点，改变指针指向")])]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("前插操作 在某结点前面插入新节点，后插与之相反。单链表中常用后插。")]),a._v(" "),t("h4",{attrs:{id:"删除结点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除结点"}},[a._v("#")]),a._v(" 删除结点")]),a._v(" "),t("p",[a._v("改变指针指向，free")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"求表长"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#求表长"}},[a._v("#")]),a._v(" 求表长")]),a._v(" "),t("p",[a._v("遍历结点，计数器 + 1")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//..")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h3",{attrs:{id:"双链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双链表"}},[a._v("#")]),a._v(" 双链表")]),a._v(" "),t("p",[a._v("单链表基础上增加前驱节点指针域 prior"),t("br"),a._v("\n 插入和删除有别与单链表，额外需要修改前驱结点指针")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//...")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h3",{attrs:{id:"循环链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[a._v("#")]),a._v(" 循环链表")]),a._v(" "),t("p",[a._v("循环单链表：尾结点指向头结点，头结点是否指向自身为判空条件"),t("br"),a._v(" "),t("strong",[a._v("对单链表常做操作是在表头和表尾进行，仅设尾指针的循环单链表更高效")]),t("br"),a._v("\n循环双链表：头、尾结点互相指向，前驱、后继指针域都指向头结点为判空条件")]),a._v(" "),t("h3",{attrs:{id:"静态链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态链表"}},[a._v("#")]),a._v(" 静态链表")]),a._v(" "),t("p",[a._v("借助数组描述线性表的链式存储结构，结点同样有数据域指针域"),t("br"),a._v("\n数据域存数据，指针域存数组下标（游标），指针域 - 1 表示表尾结点")]),a._v(" "),t("h2",{attrs:{id:"顺序表和链表的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序表和链表的比较"}},[a._v("#")]),a._v(" 顺序表和链表的比较")]),a._v(" "),t("ol",[t("li",[a._v("存取（读写）方式"),t("br"),a._v("\n顺序表可顺序存取、随机存取，链表只能从表头顺序存取")]),a._v(" "),t("li",[a._v("逻辑结构与物理结构"),t("br"),a._v("\n顺序表二者一致，链表不一定一致，通过指针表示逻辑关系")]),a._v(" "),t("li",[a._v("查找、插入和删除"),t("br"),a._v("\n按值查找：无序均为 O (n)，有序则顺序表 O (log2^n)（采用折半查找）"),t("br"),a._v("\n按序号查找：顺序表 O (1)（随机存取），链表 O (n)"),t("br"),a._v("\n 顺序表插入删除平均需移动半个表长的元素，链表仅需修改指针域。")]),a._v(" "),t("li",[a._v("空间分配"),t("br"),a._v("\n顺序存储静态存储装满上溢，动态存储可扩充，移动大量元素导致效率降低，存在分配内存失败。"),t("br"),a._v("\n链式存储需要时分配，操作灵活、高效（针对空间分配）。")])]),a._v(" "),t("h2",{attrs:{id:"如何选取存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何选取存储结构"}},[a._v("#")]),a._v(" 如何选取存储结构")]),a._v(" "),t("ol",[t("li",[a._v("基于存储考虑 无法预估不宜采用顺序表")]),a._v(" "),t("li",[a._v("基于运算 侧重按序号访问顺序表，插入删除时，元素过多链表优于顺序表（顺序表移动元素，链表修改指针）")]),a._v(" "),t("li",[a._v("基于环境 使用的编程语言等"),t("br"),a._v("\n较稳定的线性表选顺序存储，频繁插入、删除的（动态性较强）链式存储。")])])])}),[],!1,null,null,null);s.default=v.exports}}]);